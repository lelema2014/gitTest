git命令帮助信息：
1）$ git		获取简单的帮助信息
2）$ git help --all		获得完整的git子命令列表
3）$ git push --help		获得某个子命令的帮助信息

查看git版本：
$ git --version

--		裸双破折号的作用是分离一系列参数，比如分离文件名

设置环境变量：
$ export GIT_EDITOR=vim
$ git config user.name "jiarui"
$ git config user.email "aaa@qq.com"

=======================================================================


git diff readme.txt		查看工作区和版本库里面最新版本的区别，也可以用命令：git diff HEAD -- readme.txt
git log --pretty=oneline		一行显示提交版本的日志
git reset --hard HEAD^		回退到上一个版本
	在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本即是写成HEAD~100
git reset --hard b33958e6ea		将HEAD指向commit id为b33958e6ea的版本
git reflog		记录每次版本修改的历史
git checkout -- readme.txt		丢弃工作区的修改
git reset HEAD readme.txt		将暂存区的内容撤回到工作区
删除文件：
	1）在本地删除文件；
	2）git rm temp.txt
	3）git commit -m "remove temp.txt"
ssh-keygen -t rsa -C "80195554@qq.com"		在用户主目录生成ssh公钥和私钥
git remote add origin git@github.com:lelema2014/gitTest.git		本地库与远程库建立关联
git push -u origin master		把当前分支master推送到远程；第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
git checkout -b dev		-b：创建并切换到dev分支
						即：git branch dev
							git checkout dev
git branch		查看当前分支和所有分支
git merge dev		合并制定的分支到当前分支
git branch -d dev		删除分支
git log --graph --pretty=oneline --abbrev-commit		图形查看分支合并的情况
														--graph命令可以看到分支合并图
git merge --no-ff -m "merge with no-ff" dev		将dev分支合并入当前分支，不使用fast forward模式合并
git stash		把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list		查看暂存区的内容
恢复暂存区的内容：
	方法1、git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	方法2、git stash pop，恢复的同时把stash内容也删了
	方法3、当多次暂存时，使用git stash apply stash@{0}恢复暂存区内指定的内容
git branch -D feature-vulcan		强制删除分支，如果某个分支没有被合并过，再删除这个分支时，需要使用-D才能成功删除该分支
git remote		查看远程库的信息
git remote -v		显示更详细的信息，如
					$ git remote -v
					origin  git@github.com:michaelliao/learngit.git (fetch)
					origin  git@github.com:michaelliao/learngit.git (push)
					如果没有推送权限，就看不到push的地址
git push origin master		把master分支上的所有本地提交推送到远程库master分支
git branch --set-upstream dev origin/dev		指定本地dev分支与远程origin/dev分支的链接
创建标签；
	步骤1、切换到需要打标签的分支上
	步骤2、git tag v1.0 		在当前commit上打标签
		或者 git tag v0.9 6224937		在6224937的commit上打标签
		或者 git tag -a v0.1 -m "version 0.1 released" 3628164		-a指定标签名，-m指定说明文字
		或者 git tag -s v0.2 -m "signed version 0.2 released" fec145a		-s用私钥PGP签名一个标签
git tag		查看标签
git show v0.9		查看v0.9标签的信息
git tag -d v0.1		删除本地标签v0.1
git push origin v1.0		推送标签v1.0到远程
git push origin --tags		一次性推送全部尚未推送到远程的本地标签
删除远程标签:
	步骤1、git tag -d v0.9		先删除本地标签
	步骤2、git push origin :refs/tags/v0.9		再删除远程标签
					


===============================================================================

自动创建的第一个分支master
远程仓库的默认名称是origin
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本即是写成HEAD~100
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了

合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。


===============================================================================


解决冲突：
Administrator@AFOHQ-608280756 MINGW64 /e/work/git/gitTest (master)
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.

Administrator@AFOHQ-608280756 MINGW64 /e/work/git/gitTest (master|MERGING)
$ git add readme.txt

Administrator@AFOHQ-608280756 MINGW64 /e/work/git/gitTest (master|MERGING)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

        modified:   readme.txt


Administrator@AFOHQ-608280756 MINGW64 /e/work/git/gitTest (master|MERGING)
$ git commit -m "conflict fixed"
[master 55d6be1] conflict fixed

Administrator@AFOHQ-608280756 MINGW64 /e/work/git/gitTest (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

